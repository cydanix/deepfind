import XCTest
@testable import DeepFind

final class GenericHelperTests: XCTestCase {
    func testAES256EncryptionDecryption() throws {
        // Test data
        let originalData = "Hello, World!".data(using: .utf8)!
        let key = Data([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
                       0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32])

        // Encrypt
        let encryptedData = try GenericHelper.aesEncrypt(plaintext: originalData, keyData: key)

        // Verify encrypted data is different from original
        XCTAssertNotEqual(encryptedData, originalData)

        // Decrypt
        let decryptedData = try GenericHelper.aesDecrypt(sealedData: encryptedData, keyData: key)

        // Verify decrypted data matches original
        XCTAssertEqual(decryptedData, originalData)
    }

    func testAES256EncryptionDecryptionWithEmptyData() throws {
        let originalData = Data()
        let key = Data([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
                       0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32])

        let encryptedData = try GenericHelper.aesEncrypt(plaintext: originalData, keyData: key)
        let decryptedData = try GenericHelper.aesDecrypt(sealedData: encryptedData, keyData: key)

        XCTAssertEqual(decryptedData, originalData)
    }

    func testAES256EncryptionDecryptionWithLargeData() throws {
        // Create a large data block (1MB)
        let originalData = Data(count: 1024 * 1024)
        let key = Data([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
                       0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32])

        let encryptedData = try GenericHelper.aesEncrypt(plaintext: originalData, keyData: key)
        let decryptedData = try GenericHelper.aesDecrypt(sealedData: encryptedData, keyData: key)

        XCTAssertEqual(decryptedData, originalData)
    }

    func testAES256EncryptionDecryptionWithDifferentKeys() throws {
        let originalData = "Test Data".data(using: .utf8)!
        let key1 = Data([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
                        0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32])
        let key2 = Data([0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                        0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33])

        let encryptedData = try GenericHelper.aesEncrypt(plaintext: originalData, keyData: key1)

        // Attempt to decrypt with wrong key
        XCTAssertThrowsError(try GenericHelper.aesDecrypt(sealedData: encryptedData, keyData: key2))
    }
}
